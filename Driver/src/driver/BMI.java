/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package driver;

import javax.swing.JOptionPane;

/**
 *
 * @author Muhammad Ramzan
 */
public class BMI extends javax.swing.JFrame {

    /**
     * Creates new form BMI
     */
    public BMI() {
        initComponents();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        age = new javax.swing.JLabel();
        height = new javax.swing.JLabel();
        weight = new javax.swing.JLabel();
        ageTextField = new javax.swing.JTextField();
        heightTextField = new javax.swing.JTextField();
        weightTextField = new javax.swing.JTextField();
        bmi = new javax.swing.JLabel();
        btnCalculateBmi = new javax.swing.JButton();
        idealWeight = new javax.swing.JLabel();
        fat = new javax.swing.JLabel();
        bmiMenu = new javax.swing.JLabel();
        classificationSeparator = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        classificationList = new javax.swing.JList<>();
        bmiOutput = new javax.swing.JLabel();
        weightOutput = new javax.swing.JLabel();
        fatOutput = new javax.swing.JLabel();
        genderComboBox = new javax.swing.JComboBox<>();
        lengthComboBox = new javax.swing.JComboBox<>();
        weightComboBox = new javax.swing.JComboBox<>();
        heightDuaUnitl = new javax.swing.JTextField();
        weightDualUnit = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));
        setForeground(new java.awt.Color(153, 255, 51));

        age.setText("Age");

        height.setText("Height");

        weight.setText("Weight");

        ageTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        ageTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ageTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ageTextFieldFocusLost(evt);
            }
        });
        ageTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ageTextFieldMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ageTextFieldMouseExited(evt);
            }
        });
        ageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ageTextFieldKeyTyped(evt);
            }
        });

        heightTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                heightTextFieldKeyTyped(evt);
            }
        });

        weightTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                weightTextFieldKeyTyped(evt);
            }
        });

        bmi.setText("BMI");

        btnCalculateBmi.setForeground(new java.awt.Color(0, 204, 0));
        btnCalculateBmi.setText("Calculate BMI");
        btnCalculateBmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateBmiActionPerformed(evt);
            }
        });

        idealWeight.setText("Ideal Weight");

        fat.setText("FAT");

        bmiMenu.setForeground(new java.awt.Color(0, 204, 51));
        bmiMenu.setText("BMI CLASSIFICATION");

        classificationList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Very Severely Underweight         <16", "Severely Underweight                  16-17", "Underweight                                    17-18.5", "Normal                                              18.5-25", "Overweight                                       25-30", "Obese Class 1                                 30-35", "Obese Class 2                                 35-40", "Obese Class 3                                 >40" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(classificationList);

        bmiOutput.setText("0");

        weightOutput.setText("0");

        fatOutput.setText("0");

        genderComboBox.setForeground(new java.awt.Color(0, 204, 0));
        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        lengthComboBox.setForeground(new java.awt.Color(0, 204, 0));
        lengthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FT+IN", "CM" }));
        lengthComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                lengthComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        weightComboBox.setForeground(new java.awt.Color(0, 204, 0));
        weightComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ST+LB", "KG", "LB" }));
        weightComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                weightComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        heightDuaUnitl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                heightDuaUnitlKeyTyped(evt);
            }
        });

        weightDualUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                weightDualUnitKeyTyped(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 0, 0));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText(" \t\t\t                                         BMI CALCULATOR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bmiMenu)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(bmiOutput)
                                .addGap(123, 123, 123)
                                .addComponent(weightOutput))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(age)
                            .addComponent(height)
                            .addComponent(weight))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(idealWeight)
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fatOutput)
                                    .addComponent(fat)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(weightTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                    .addComponent(heightTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ageTextField, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(weightDualUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(heightDuaUnitl, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(67, 67, 67)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(weightComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lengthComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(118, 118, 118)
                                        .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(bmi)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(classificationSeparator)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCalculateBmi)))
                .addGap(157, 157, 157))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(age)
                    .addComponent(ageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(height)
                    .addComponent(heightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lengthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightDuaUnitl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weight)
                    .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightDualUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnCalculateBmi)
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idealWeight)
                            .addComponent(fat)
                            .addComponent(bmi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addComponent(classificationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bmiMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bmiOutput)
                            .addComponent(weightOutput)
                            .addComponent(fatOutput))
                        .addGap(230, 230, 230))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalculateBmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateBmiActionPerformed
        // TODO add your handling code here:
        /*variables to get text and compution*/
        String iage;
        String ihight;
        String iweight;
        int iAge = 0;
        double iHeight = 0;
        double iWeight = 0;
        
        /* check the height unit either CM*/
        if (lengthComboBox.getSelectedItem()=="CM") { 
           ihight =  heightTextField.getText();
           /* if user click button without value check and signal error*/
           if (ihight.length() > 0) {
                /* Condition that max didgits should be 5 otherwise pass only 5 digits*/
                if (ihight.length() < 6) {
                 iHeight = Double.parseDouble(ihight);   
                } else {
                 iHeight = Double.parseDouble(ihight.substring(0,5)); 
                }
           } else {
               JOptionPane.showMessageDialog(null," Give Complete information ");
           }
        /* height unit is FT+IN*/
        } else {
        String sFt = heightTextField.getText();
        String sInch = heightTextField.getText();
        double ft = 0;
        double inch = 0;
            /* if user click button without value check and signal error*/
            if (sFt.length() > 0) {
                /* Condition that max didgits should be 3 otherwise pass only 3 digits*/
                if (sFt.length() < 4) {
                    ft = Double.parseDouble(sFt);
                } else {
                    ft = Double.parseDouble(sFt.substring(0,3));
                }
            } else {
                JOptionPane.showMessageDialog(null," Give Complete information ");
            }
            /* if user click button without value check and signal error*/
            if (sInch.length() > 0){
                /* Condition that max didgits should be 4 otherwise pass only 4 digits*/
                if (sInch.length() < 5) {
                    inch = Double.parseDouble(sInch);
                } else {
                    inch = Double.parseDouble(sInch.substring(0,4));
                }
            } else {
                JOptionPane.showMessageDialog(null," Give Complete information ");
            }
            
        /* convert height to cm */
        iHeight = ft*30.48+inch*2.54;
        }

        
       /* getting the age */
       iage = ageTextField.getText();
       if (iage.length() > 0) {
            /* Condition that max didgits should be 3 otherwise pass only 3 digits*/
            if (iage.length() < 4) {
                iAge = Integer.parseInt(iage);
            } else {
                iAge = Integer.parseInt(iage.substring(0,2));
            }
       } else {
           JOptionPane.showMessageDialog(null," Give Complete information ");
       }
        
        /*checking the unit seletecd for weight is KG and validating the value */
        if (weightComboBox.getSelectedItem() == "KG") {     
        iweight = weightTextField.getText();
            if (iweight.length() >0 ) {
                /* Condition that max didgits should be 5 otherwise pass only 5 digits*/
                if (iweight.length() < 6){
                    iWeight = Double.parseDouble(iweight);
                } else {
                    iWeight = Double.parseDouble(iweight.substring(0,4));
                }
            } else {
                JOptionPane.showMessageDialog(null," Give Complete information ");
            }  
        } // if for KG is ended
        
        /*checking the unit seletecd for weight either LB validating the value and convert to KG */
        else if (weightComboBox.getSelectedItem() == "LB") {    
        iweight = weightTextField.getText();
            if(iweight.length() > 0){
                /* Condition that max didgits should be 5 otherwise pass only 5 digits*/
                if (iweight.length() < 6) {
                    iWeight = Double.parseDouble(iweight);
                } else {
                    iWeight = Double.parseDouble(iweight.substring(0,4));
                }
            } else {
                JOptionPane.showMessageDialog(null," Give Complete information ");
            }

        /* Convert the weight into KG */
        iWeight = iWeight*0.453;
        
        } //else if for LB is ended
        
        /*getting the unit in stones and pound and computing the value in Kg */   
        else {
        iweight = weightTextField.getText();
        String lbs = weightDualUnit.getText();
        double st = 0;
        double lb = 0;
            if (iweight.length() > 0){
                /* Condition that max didgits should be 3 otherwise pass only 3 digits*/
                if (iweight.length() < 4) {
                    st = Double.parseDouble(iweight);
                } else {
                    st = Double.parseDouble(iweight.substring(0,2));
                }
            } else {
                JOptionPane.showMessageDialog(null," Give Complete information ");
            }
            if (lbs.length() > 0) {
                /* Condition that max didgits should be 5 otherwise pass only 5 digits*/
                if (lbs.length() < 6) {
                    lb = Double.parseDouble(lbs);
                } else {
                    lb = Double.parseDouble(lbs.substring(0,4));
                }
            } else {
               JOptionPane.showMessageDialog(null," Give Complete information "); 
            }
            
                
        /* Convert the weight into KG */        
        iWeight = st*6.350+lb*0.453;     
        
        }//else for ST+LB is ended
        
        /*Computing the BMI and set the value in output label */
        double h = iHeight / 100.0;               // convert cm to m
        double iBmi = iWeight / (h * h);          // bmi=weight(kg)/height(m^2)
        
        if (iBmi > 0) {
            String str = "" + iBmi;
            bmiOutput.setText(str.substring(0,6)); // show bmi in 5 digits
        } else {
            bmiOutput.setText("?");
        }
        
        
        /* Cheking the gender and computing the Body Fat Percentage accoerdingly */
        if(genderComboBox.getSelectedItem() == "Male"){
            /* formula for male childs */
            if (iAge > 1 && iAge < 18) {
                
                double bfp = (1.51 * iBmi) - (0.07 * iAge) - (3.6 * 1) + 1.4;
                if (bfp > 0) {
                    String pBfp = "" + bfp;
                    fatOutput.setText(pBfp.substring(0,5) + " %") ;
                } else {
                    fatOutput.setText("?") ;
                }
            /* formula for male adults */    
            } else {
                
            double bfp = (1.20 * iBmi) + (0.23 * iAge) - (10.8 * 1) - 5.4;
                if (bfp > 0) {
                    String pBfp = "" + bfp;
                    fatOutput.setText(pBfp.substring(0,5) + " %") ;
                } else {
                    fatOutput.setText("?") ;
                }    
            }
        } else {
            
            /* formula for female childs */
            if ( iAge > 1 && iAge < 18) {
                
                double bfp = (1.51 * iBmi) -(0.07 * iAge) - (3.6 * 0) + 1.4;
                if (bfp > 0) {
                    String pBfp = "" + bfp;
                    fatOutput.setText(pBfp.substring(0,5) + " %") ;
                } else {
                    fatOutput.setText("?") ;
                }
                
            } else {
                
                /* formula for female adults */
                double bfp = (1.20 * iBmi) + (0.23 * iAge) - (10.8 * 0) - 5.4;
                if (bfp > 0) {
                    String pBfp = "" + bfp;
                    fatOutput.setText(pBfp.substring(0,5) + " %") ;
                } else {
                    fatOutput.setText("?") ;
                } 
            }
        }
        
        /* Convert the height into inches for computing the ideal body weight */
        iHeight = iHeight * 0.393; 
        
        /* Computing the ideal weigth on gender base */
        if(genderComboBox.getSelectedItem() == "Male"){
            
        /* formula of ideal weight for Male*/
        double ibw = 52 + (1.9 * (iHeight - 60));
            
            if (ibw>0){
                String idealW = "" + ibw;
                weightOutput.setText(idealW.substring(0,4) + " KG");
            } else {
                weightOutput.setText("?");
            }
            
        } else {
            
            /* formula of ideal weight for Famale*/
            double ibw = 49 + (1.7 * (iHeight - 60));
            
            if (ibw>0){
                String idealW = "" + ibw;
                weightOutput.setText(idealW.substring(0,4) + " KG");
            } else {
                weightOutput.setText("?");
            }  
        }
  
    }//GEN-LAST:event_btnCalculateBmiActionPerformed

    private void ageTextFieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ageTextFieldMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_ageTextFieldMouseEntered

    private void ageTextFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ageTextFieldMouseExited
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ageTextFieldMouseExited
    
    private void ageTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ageTextFieldFocusGained
        // TODO add your handling code here:
        //ageTextField.setForeground(Color.black);
        //ageTextField.setText("");
        
    }//GEN-LAST:event_ageTextFieldFocusGained

    private void ageTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ageTextFieldFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_ageTextFieldFocusLost

    private void lengthComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_lengthComboBoxPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if((String)lengthComboBox.getSelectedItem() == "FT+IN"){
            heightDuaUnitl.setVisible(true);
        } else {
            heightDuaUnitl.setVisible(false);
        }
        
        
    }//GEN-LAST:event_lengthComboBoxPopupMenuWillBecomeInvisible

    private void weightComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_weightComboBoxPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if((String)weightComboBox.getSelectedItem() == "ST+LB"){
            weightDualUnit.setVisible(true);
        } else {
            weightDualUnit.setVisible(false);
        }        
    }//GEN-LAST:event_weightComboBoxPopupMenuWillBecomeInvisible

    private void ageTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageTextFieldKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            //
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_ageTextFieldKeyTyped

    private void heightTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_heightTextFieldKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            //
            getToolkit().beep();
            evt.consume();
        }        
    }//GEN-LAST:event_heightTextFieldKeyTyped

    private void heightDuaUnitlKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_heightDuaUnitlKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            //
            getToolkit().beep();
            evt.consume();
        }        
    }//GEN-LAST:event_heightDuaUnitlKeyTyped

    private void weightTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weightTextFieldKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            //
            getToolkit().beep();
            evt.consume();
        }        
    }//GEN-LAST:event_weightTextFieldKeyTyped

    private void weightDualUnitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weightDualUnitKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            //
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_weightDualUnitKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BMI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel age;
    private javax.swing.JTextField ageTextField;
    private javax.swing.JLabel bmi;
    private javax.swing.JLabel bmiMenu;
    private javax.swing.JLabel bmiOutput;
    private javax.swing.JButton btnCalculateBmi;
    private javax.swing.JList<String> classificationList;
    private javax.swing.JSeparator classificationSeparator;
    private javax.swing.JLabel fat;
    private javax.swing.JLabel fatOutput;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JLabel height;
    private javax.swing.JTextField heightDuaUnitl;
    private javax.swing.JTextField heightTextField;
    private javax.swing.JLabel idealWeight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JComboBox<String> lengthComboBox;
    private javax.swing.JLabel weight;
    private javax.swing.JComboBox<String> weightComboBox;
    private javax.swing.JTextField weightDualUnit;
    private javax.swing.JLabel weightOutput;
    private javax.swing.JTextField weightTextField;
    // End of variables declaration//GEN-END:variables
}
